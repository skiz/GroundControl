#kivy 1.9.9

#<Widget>:
#This can be used to create boxes around each widget to clarify positioning issues. It is only for debug
#    canvas.after:
#        Line:
#            rectangle: self.x+1,self.y+1,self.width-1,self.height-1
#            dash_offset: 5
#            dash_length: 3

<ScreenControls>
    BoxLayout:
        orientation: 'horizontal'
        pos: (0, root.height - 60)
        size_hint: (.5,None)
        height: dp(60)

        Button:
            text: "Actions"
            on_press: root.show_actions()
        Button:
            text: "Settings"
            on_press: app.open_settings()

<GcodeCanvas>:
    scatterObject:scatterObject
    scatterInstance:scatterInstance
    positionIndicator:positionIndicator
    targetIndicator:targetIndicator

    ScatterPlane:
        do_rotation: False
        id: scatterInstance
        Label:
            id: scatterObject
            text: ""
        PositionIndicator:
            id: positionIndicator
        PositionIndicator:
            id: targetIndicator
        MenuSpawner:
            timeout: 1
            menu_args:
                dict(
                creation_direction=1,
                radius=10,
                creation_timeout=.2,
                choices=[
                dict(text='[color=3333ff]Move Here[/color]', markup = True, index=1, callback=root.updateGcode),
                dict(text='Position Text Placeholder' , markup = True, index=2, callback=root.doNothing),
                dict(text='[color=3333ff]Mark Here[/color]', markup = True, index=3, callback=root.updateGcode)])

<FrontPage>:
    textconsole:textconsole
    moveDistInput:moveDistInput
    moveSpeedInput:moveSpeedInput
    gcodecanvas:gcodecanvas
    screenControls:screenControls
    holdBtn:holdBtn


    GcodeCanvas:
        id: gcodecanvas
    BoxLayout:
        orientation: 'vertical'
        pos: root.width - dp(300), root.height - dp(630)
        GridLayout:
            cols: 4
            size_hint: None, None
            width:dp(300)
            height: dp(60*4)
            #disabled: not app.data.connectionStatus
            Button:
                on_press: root.upLeft()
                canvas.after:
                    Triangle:
                        points: self.x+self.width/2,self.y+self.width/2,self.x+self.width/2,self.y+self.width/4,self.x+3*self.width/4,self.y+self.width/2,
            Button:
                on_press: root.up()
                canvas.after:
                    Triangle:
                        points: self.x+self.width/3,self.y+self.height/3,self.x+2*self.width/3,self.y+self.height/3,self.x+self.width/2,self.y+2*self.height/3,
            Button:
                on_press: root.upRight()
                canvas.after:
                    Triangle:
                        points: self.x+self.width/2,self.y+self.width/2,self.x+self.width/2,self.y+self.width/4,self.x+self.width/4,self.y+self.width/2,
            Button:
                text: 'Macro 1'
                on_press: root.macro(1)
            Button:
                on_press: root.left()
                canvas.after:
                    Triangle:
                        points: self.x+self.width/3,self.y+self.height/2,self.x+2*self.width/3,self.y+self.height/3,self.x+2*self.width/3,self.y+2*self.height/3,
            Button:
                text: 'HOME'
                on_press: root.home()
            Button:
                on_press: root.right()
                canvas.after:
                    Triangle:
                        points: self.x+2*self.width/3,self.y+self.height/2,self.x+self.width/3,self.y+self.height/3,self.x+self.width/3,self.y+2*self.height/3,
            Button:
                text: 'Macro 2'
                on_press: root.macro(2)
            Button:
                on_press: root.downLeft()
                canvas.after:
                    Triangle:
                        points: self.x+self.width/2,self.y+self.width/2,self.x+self.width/2,self.y+self.width/4,self.x+3*self.width/4,self.y+self.width/4,
            Button:
                on_press: root.down()
                canvas.after:
                    Triangle:
                        points: self.x+self.width/3,self.y+2*self.height/3,self.x+2*self.width/3,self.y+2*self.height/3,self.x+self.width/2,self.y+self.height/3,
            Button:
                on_press: root.downRight()
                canvas.after:
                    Triangle:
                        points: self.x+self.width/2,self.y+self.width/4,self.x+self.width/4,self.y+self.width/4,self.x+self.width/2,self.y+self.width/2,
            Button:
                text: 'Z-Axis'
                on_press: root.zAxisPopup()
            Label:
                id: moveSpeedInput
                text: "Dist To \nMove:"
                multiline: False
            Button:
                id: moveDistInput
                text: '100'
                multiline: False
                on_press: root.textInputPopup(self)
            Button:
                text: root.units
                on_press: root.switchUnits()
            Button:
                text: 'Define\nHome'
                on_release: root.moveOrigin()

        GridLayout:
            cols: 3
            size_hint: None, None
            width: dp(300)
            height: dp(60)
            #disabled: not app.data.connectionStatus
            Button:
                text: 'RUN'
                on_press: root.startRun()
            Button:
                id: holdBtn
                text: "HOLD"
                on_press: root.pause()
            Button:
                text: 'STOP'
                on_press: root.stopRun()
        GridLayout:
            cols: 5
            size_hint: None, None
            width: dp(300)
            height: dp(30)
            #disabled: not app.data.connectionStatus
            Button:
                text: "<Z"
                on_press: root.moveGcodeZ(-1)
            Button:
                text: "<1"
                on_press: root.moveGcodeIndex(-1)
            Button:
                text: "Goto"
                on_press: root.gotoLinePopup()
            Button:
                text: "1>"
                on_press: root.moveGcodeIndex(1)
            Button:
                text: "Z>"
                on_press: root.moveGcodeZ(1)
        BoxLayout:
            orentation: 'horizontal'
            size_hint: None, None
            width: dp(300)
            height: dp(70)
            #disabled: not app.data.connectionStatus
            GridLayout:
                cols: 2
                Label:
                    text: '                   X :'
                Label:
                    text: root.xReadoutPos
                Label:
                    text: '                   Y : '
                Label:
                    text: root.yReadoutPos
                Label:
                    text: '                   Z : '
                Label:
                    text: root.zReadoutPos
            GridLayout:
                cols: 1
                Label:
                    text: "Percent Complete/Line:"
                    font_size: '11sp'
                Label:
                    text: root.percentComplete
                Label:
                    text: root.gcodeLineNumber
        Label:
            text: root.connectionStatus
            size_hint: None, None
            width: dp(300)
            height: dp(30)
            disabled: False
        ScrollableLabel:
            id: textconsole
            size: dp(300), dp(200)
            text: root.consoleText
            size_hint: None, None

    ScreenControls:
        id: screenControls
        size_hint: (1, 1)

<ViewMenu>:
    cols:1
    size: root.size
    pos: root.pos
    Label:
        text: "View"
    Button:
        text: 'Open File'
        on_press: root.openFile()
    Button:
        text: 'Update Gcode'
        on_release: root.reloadGcode()
    Button:
        text: 'View Gcode'
        disabled: False
        on_press: root.show_gcode()
    Button:
        text: 'Reset View'
        disabled: False
        on_press: app.frontpage.gcodecanvas.centerCanvas()
        on_release: root.resetView()

<RunMenu>:
    GridLayout:
        cols: 1
        size: root.size
        pos: root.pos
        Label:
            text: "Run"
        Button:
            text: 'Quit Ground Control'
            on_release: root.closeGC()
        Button:
            text: 'Return To Center'
            on_release: root.returnToCenter()
            #disabled: not app.data.connectionStatus
        Button:
            text: 'Zero Z'
            disabled: True
        Button:
            text: 'Auto Zero Z'
            disabled: True

<ScrollableLabel>:
    Label:
        size_hint_y: None
        height: self.texture_size[1]
        text_size: self.width, None
        text: root.text

<ConnectMenu>:
    GridLayout:
        cols: 1
        size: root.size
        pos: root.pos
        Label:
            text: "Connect"
        Button:
            text: 'Connect'
            on_press: root.connect()
        Spinner:
            id: ports
            text: "Ports"
            values: root.COMports
            on_text: root.setPort(ports.text)
        Button:
            text: 'Update List'
            on_press: root.updatePorts()

<Diagnostics>:
    GridLayout:
        rows: 2
        size: root.size
        pos: root.pos
        Label:
            text: "Diagnostic features"
        GridLayout:
            cols: 3
            #disabled: not app.data.connectionStatus
            Button:
                text: 'Test Motors/Encoders'
                on_press: root.testMotors()
            Button:
                text: 'Calibrate Machine Dimensions'
                on_release: root.measureMachine()
            Button:
                text: 'Calibrate Chain Length - Automatic'
                on_release: root.calibrateChainLengths()
            Button:
                text: 'Calibrate Motors\n-----Obsolete-----'
                on_release: root.calibrateMotors()
                disabled: True
            Button:
                text: 'About'
                disabled: False
                on_release: root.about()
            Spinner:
                id: advancedOptions
                text: "Advanced"
                values: ["Calibrate Chain Length - Manual", "Test Feedback System", "Wipe EEPROM", "Simulation"]
                on_text: root.advancedOptionsFunctions(advancedOptions.text)

<ManualControl>:
    GridLayout:
        rows: 2
        size: root.size
        pos: root.pos
        Label:
            text: "Manual Control"
        GridLayout:
            cols: 12
            #disabled: not app.data.connectionStatus
            Label:
                text: "X:"
            Button:
                text: '-5'
                disabled: True
            Button:
                text: '-4'
                disabled: True
            Button:
                text: '-3'
                disabled: True
            Button:
                text: '-2'
                disabled: True
            Button:
                text: '-1'
                disabled: True
            Button:
                text: '0'
                disabled: True
            Button:
                text: '1'
                disabled: True
            Button:
                text: '2'
                disabled: True
            Button:
                text: '3'
                disabled: True
            Button:
                text: '4'
                disabled: True
            Button:
                disabled: True
                text: '5'

            Label:
                text: "Y:"
            Button:
                disabled: True
                text: '-5'
            Button:
                disabled: True
                text: '-4'
            Button:
                disabled: True
                text: '-3'
            Button:
                disabled: True
                text: '-2'
            Button:
                disabled: True
                text: '-1'
            Button:
                disabled: True
                text: '0'
            Button:
                disabled: True
                text: '1'
            Button:
                disabled: True
                text: '2'
            Button:
                disabled: True
                text: '3'
            Button:
                disabled: True
                text: '4'
            Button:
                disabled: True
                text: '5'

            Label:
                text: "Z:"
            Button:
                disabled: True
                text: '-5'
            Button:
                disabled: True
                text: '-4'
            Button:
                disabled: True
                text: '-3'
            Button:
                disabled: True
                text: '-2'
            Button:
                disabled: True
                text: '-1'
            Button:
                disabled: True
                text: '0'
            Button:
                disabled: True
                text: '1'
            Button:
                disabled: True
                text: '2'
            Button:
                disabled: True
                text: '3'
            Button:
                disabled: True
                text: '4'
            Button:
                disabled: True
                text: '5'

<OtherFeatures>:
    connectmenu:connectmenu
    viewmenu:viewmenu
    diagnostics:diagnostics
    runmenu:runmenu

    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            orientation: 'horizontal'
            padding:2
            spacing:0

            ViewMenu:
                id: viewmenu
            RunMenu:
                id: runmenu
            ConnectMenu:
                id: connectmenu
        BoxLayout:
            orientation: 'vertical'
            padding:2
            spacing:0

            Diagnostics:
                id: diagnostics
            Button:
                text: "Close"
                size_hint_y: .15
                on_release: root.close()

<SoftwareSettings>:

<PositionIndicator>:
    size: 50, 50
    canvas:
        Color:
            rgb: root.color
        Line:
            circle:
                (self.center_x-self.width/2, self.center_y-self.height/2, min(self.width, self.height)/ 2)
        Line:
            circle:
                (self.center_x-self.width/2, self.center_y-self.height/2, self.positionErrorRadius)
        Line:
            circle:
                (self.center_x-self.width/2, self.center_y-self.height/2, .5)
        Line:
            points: (self.x-self.width/2, self.y-self.height/2, self.width/2+self.x, self.height/2+self.y)
        Line:
            points: (self.x-self.width/2, self.height/2+self.y, self.width/2+self.x, self.y-self.height/2)

<LoadDialog>:
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"
        FileChooser:
            id: filechooser
            path: root.path
            filters: ['*.nc','*.ngc','*.text,','*.gcode']
            FileChooserIconLayout
            FileChooserListLayout

        BoxLayout:
            size_hint_y: None
            height: dp(30)
            Button:
                text: 'Icon View'
                on_press: filechooser.view_mode = 'icon'
                size_hint_x: 0.3
            Button:
                text: 'List View'
                on_press: filechooser.view_mode = 'list'
                size: root.width/8,root.height
                size_hint_x: 0.3
            Button:
                text: "Load"
                on_release: root.load(filechooser.path, filechooser.selection)
            Button:
                text: "Cancel"
                on_release: root.cancel()

<NotificationPopup>:
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"

        ScrollableLabel:
            text: root.text

        BoxLayout:
            size_hint_y: None
            height: dp(60)
            Button:
                text: "Continue"
                on_release: root.continueOn()

<ScrollableTextPopup>:
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"

        ScrollableLabel:
            text: root.text

        BoxLayout:
            size_hint_y: None
            height: dp(60)
            Button:
                text: "Close"
                on_release: root.cancel()

<PageableTextPopup>:
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"

        ScrollableLabel:
            text: root.text

        BoxLayout:
            size_hint_y: None
            height: dp(30)
            Button:
                text: "Prev"
                on_release: root.prev()
            Button:
                text: "Next"
                on_release: root.next()
            Button:
                text: "Close"
                on_release: root.cancel()

<SaveDialog>:
    text_input: text_input
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"
        FileChooserListView:
            id: filechooser
            on_selection: text_input.text = self.selection and self.selection[0] or ''

        TextInput:
            id: text_input
            size_hint_y: None
            height: dp(30)
            multiline: False

        BoxLayout:
            size_hint_y: None
            height: dp(30)
            Button:
                text: "Cancel"
                on_release: root.cancel()

            Button:
                text: "Save"
                on_release: root.save(filechooser.path, text_input.text)

<TouchNumberInput>:
    textInput:textInput
    cols: 1
    size: root.size
    pos: root.pos
    TextInput:
        size_hint_y:.25
        font_size: self.height - 5
        id:textInput
    GridLayout:
        cols: 3
        Button:
            text: "1"
            on_release: root.addText("1")
        Button:
            text: "2"
            on_release: root.addText("2")
        Button:
            text: "3"
            on_release: root.addText("3")
        Button:
            text: "4"
            on_release: root.addText("4")
        Button:
            text: "5"
            on_release: root.addText("5")
        Button:
            text: "6"
            on_release: root.addText("6")
        Button:
            text: "7"
            on_release: root.addText("7")
        Button:
            text: "8"
            on_release: root.addText("8")
        Button:
            text: "9"
            on_release: root.addText("9")
        Button:
            text: "."
            on_release: root.addText(".")
        Button:
            text: "0"
            on_release: root.addText("0")
        Button:
            text: "Done"
            on_release: root.done()

<ZAxisPopupContent>:
    distBtn:distBtn
    unitsBtn:unitsBtn
    cols: 1
    size: root.size
    pos: root.pos
    GridLayout:
        cols: 3
        Button:
            text: ".1"
            id: distBtn
            on_release: root.setDist()
        Button:
            text: "MM"
            on_release: root.units()
            id: unitsBtn
        Button:
            text: "Lower"
            on_release: root.zIn()
        Button:
            text: "Done"
            on_release: root.done()
        Button:
            text: "Define Zero"
            on_release: root.zero()
        Button:
            text: "Raise"
            on_release: root.zOut()

<MeasureMachinePopup>:
    carousel:carousel
    linksTextInput:linksTextInput
    reviewNumbers:reviewNumbers
    cutBtn:cutBtn
    goBackBtn:goBackBtn
    goFwdBtn:goFwdBtn
    horizMeasure:horizMeasure
    vertMeasure:vertMeasure
    unitsBtn:unitsBtn
    enterValues:enterValues
    zAxisActiveSwitch:zAxisActiveSwitch
    chooseKinematicsType:chooseKinematicsType
    triangleMeasure: triangleMeasure
    unitsBtnT:unitsBtnT
    enterValuesT:enterValuesT
    cutBtnT:cutBtnT
    
    cols: 1
    size: root.size
    pos: root.pos
    #top bar
    GridLayout:
        cols: 3
        size_hint_y: .1
        Button:
            text: "<Go Back"
            on_release: root.backBtn()
            id: goBackBtn
            disabled: True
        Label:
            text: root.stepText#Step {} of 9'.format(carousel.index)
        Button:
            text: "Skip>"
            id: goFwdBtn
            on_release: root.fwdBtn()
    Carousel:
        id: carousel
        direction: "right"
        size_hint_y: .9
        on_index: root.slideJustChanged()
        #:set leftCol .8
        #:set rightCol .2
        #intro
        GridLayout:
            cols: 2
            Label:
                text: 'This walk-through will guide you through the process of calibrating your Maslow Machine. \n\nClick Begin to start. \n\nYou can move forward and backwards through the walk-through at any time using the Previous and Next buttons\n\nYou can also skip this process entirely and enter your machine dimensions in the Settings window\n\nYour feedback on how to improve this process is more than welcome'
                size_hint_x: leftCol
            GridLayout:
                cols: 1
                size_hint_x: rightCol
                Label:
                Label:
                    text: 'The controls you will need\nfor each step will be on here\non the right'
                Button:
                    text: "Begin"
                    on_release: root.defineInitialState()
                Button:
                    text: "Close"
                    on_release: root.done()
                Label:
        #Set sprockets to 12 o'clock
        GridLayout:
            cols: 2
            GridLayout:
                cols: 1
                Label:
                    text: "Orient each sprocket so that one tooth faces straight up in the 12:00 o'clock position.\n\nIt is important to start with the sprockets in a known configuration. \nUse the buttons to the right to rotate each sprocket so that one tooth points straight up.\nWhen you are ready, press Set Zero"
                    size_hint_x: leftCol
                Image:
                    source: "./Documentation/Calibrate Machine Dimensions/Sprocket at 12-00.jpg"
            GridLayout:
                cols: 1
                size_hint_x: rightCol
                Label:
                Button:
                    text: 'Turn Left Sprocket\n1 degree CCW'
                    on_release: root.LeftCCW()
                Button:
                    text: 'Turn Left Sprocket\n1 degree CW'
                    on_release: root.LeftCW()
                Button:
                    text: 'Turn Right Sprocket\n1 degree CCW'
                    on_release: root.RightCCW()
                Button:
                    text: 'Turn Right Sprocket\n1 degree CW'
                    on_release: root.RightCW()
                Button:
                    text: 'Set Zero'
                    on_release: root.setZero()
                Label:
        #Measure spacing between motors
        GridLayout:
            cols: 2
            GridLayout:
                cols: 1
                Label:
                    text: "Rather than using a tape measure to measure the spacing between the motors, we're going to use the chain.\n\nHook the first link from the left chain over the top tooth on the left motor\n\nThen, use the buttons to the right to extend the chain until it can reach the right motor.\n\nBe sure to keep an eye on the chains during this process to ensure that they do not become tangled\naround the sprocket. The motors are very powerful and the machine can damage itself this way\n\nHook the third link on the right motor's 12:00 tooth as shown in the picture below\n\nPull the chain tight by pressing Pull Chain Tight. You can use this button repeatedly if needed\n\nPress Measure when the chain is taught"
                    size_hint_x: leftCol
                GridLayout:
                    cols: 3
                    Image:
                        source: "./Documentation/Calibrate Machine Dimensions/Chain On Left Sprocket.jpg"
                    Image:
                        source: "./Documentation/Calibrate Machine Dimensions/Chain Between Sprockets.jpg"
                    Image:
                        source: "./Documentation/Calibrate Machine Dimensions/Chain On Right Sprocket.jpg"
            GridLayout:
                cols: 1
                size_hint_x: rightCol
                Label:
                Button:
                    text: 'Extend Left Chain 1mm'
                    on_release: root.extendLeft(1)
                Button:
                    text: 'Extend Left Chain 10mm'
                    on_release: root.extendLeft(10)
                Button:
                    text: 'Extend Left Chain 100mm'
                    on_release: root.extendLeft(100)
                Button:
                    text: 'Extend Left Chain 1000mm'
                    on_release: root.extendLeft(1000)
                Button:
                    text: 'Pull Chain Tight'
                    on_release: root.pullChainTight()
                Button:
                    text: 'Measure'
                    on_release: root.measureLeft()
                Button:
                    text: "Stop\nMotors"
                    on_release: root.stopCut()
                Label:
        #Measure sled spacing
        GridLayout:
            cols: 2
            GridLayout:
                cols: 1
                Label:
                    text: "Detach the end of the chain from the right sprocket\n\nFeed the free end through the sled mounting brackets and hold it in place with cotter pins\n\nCount the holes between the two pins and enter the number in the box to the right, then click Continue\nWe will refine this measurement later, it is only an initial guess.\n\nSkip this step if you are using a linkage kit"
                    size_hint_x: leftCol
                Image:
                    source: "./Documentation/Calibrate Machine Dimensions/Chain Between Sled Mounts.jpg"
            GridLayout:
                cols: 1
                size_hint_x: rightCol
                Label:
                Button:
                    text: 'Extend Left Chain 10mm'
                    on_release: root.extendLeft(10)
                Button:
                    text: 'Retract Left Chain 10mm'
                    on_release: root.retractLeft(10)
                Button:
                    id: linksTextInput
                    text: "0"
                    multiline: False
                    on_press: root.textInputPopup(self)
                Button:
                    text: "Continue"
                    on_release: root.countLinks()
                Label:
        #Measure to the top of the sheet
        GridLayout:
            cols: 2
            GridLayout:
                cols: 1
                size_hint_x: leftCol
                Label:
                    text: "Unhook the cotter pin from the sled\n\nRetract the chain until it hangs down from the motor to the height of the top of the 4x8 sheet, then click Measure\n\nBe careful that the chain hangs straight down, and is not caught on the chain tensioner to get an accurate measurement\n\nThis measurement is not critical for the internal mathematics\nit simply moves the center point of the plywood up and down"
                    size_hint_x: leftCol
                Image:
                    source: "./Documentation/Calibrate Machine Dimensions/Measure Motor Height.jpg"
            GridLayout:
                cols: 1
                size_hint_x: rightCol
                Label:
                Button:
                    text: 'Extend Left Chain 10mm'
                    on_release: root.extendLeft(10)
                Button:
                    text: 'Retract Left Chain 1mm'
                    on_release: root.retractLeft(1)
                Button:
                    text: 'Retract Left Chain 10mm'
                    on_release: root.retractLeft(10)
                Button:
                    text: 'Retract Left Chain 100mm'
                    on_release: root.retractLeft(100)
                Button:
                    text: 'Retract Left Chain 1000mm'
                    on_release: root.retractLeft(1000)
                Button:
                    text: "Stop\nMotors"
                    on_release: root.stopCut()
                Button:
                    text: 'Measure'
                    on_release: root.measureLeft()
                Label:
        #review measurements
        GridLayout:
            cols: 2
            GridLayout:
                cols: 1
                size_hint_x: leftCol
                Label:
                    id: reviewNumbers
                    text: "Let's review the measurements we've made so far to make sure they look correct\n\nMotor Spacing: 300mm\nSled Mount Spacing: 300mm\nVertical Offset: 400mm\n\nYou can go back and re-do any of these numbers if you would like"
                Label:
                    text: 'Note: Two important factors are not measured in this process:\n\n1) The distance from the chain mounting points to the router bit\n2) The center of gravity of the sled\n\nIf you are using the standard sled design and router the default values will be close\n\nIf you are using a custom design, it is a good idea to measure these values manually and enter them in the settings. \n\nIf you have a recomendation for a way to automate these measurements, let us know in the forums'
            GridLayout:
                cols: 1
                size_hint_x: rightCol
                Label:
                Button:
                    text: 'Continue'
                    on_release: carousel.load_next()
                Label:
        #measure out chains
        GridLayout:
            cols: 2
            GridLayout:
                cols: 1
                size_hint_x: leftCol
                Label:
                    text: "Now we are going to measure out the chains and reattach the sled\n\nHook the first link of the right chain on the vertical tooth of the right sprocket\n as shown in the picture below\n\nThe left chain does not need to be moved, it can be left partly extended\n\nThe correct length of first the left and then the right chain will be measured out\n\nOnce both chains are finished attach the sled, then press Next\nPressing Next will move the sled to the center of the sheet.\n\nBe sure to keep an eye on the chains during this process to ensure that they do not become tangled\naround the sprocket. The motors are very powerful and the machine can damage itself this way"
                    size_hint_x: leftCol
                GridLayout:
                    cols: 2
                    Image:
                        source: "./Documentation/Calibrate Machine Dimensions/Ready To Calibrate Right Sprocket.jpg"
                    Image:
                        source: "./Documentation/Calibrate Machine Dimensions/Sled Attached.jpg"
            GridLayout:
                cols: 1
                size_hint_x: rightCol
                Label:
                Button:
                    text: 'Calibrate\nChain Lengths'
                    on_release: root.calibrateChainLengths()
                Button:
                    text: 'Stop'
                    on_release: root.stopCut()
                Button:
                    text: 'Next'
                    on_release: root.finishChainCalibration()
                Label:
        #set z-axis depth
        GridLayout:
            cols: 2
            GridLayout:
                cols: 1
                size_hint_x: leftCol
                Label:
                    text: "Next, we are going to define the home position for the z-axis\n\nIf you have an automatic z-axis installed use the buttons to enable it and adjust the z-axis until the router bit\nbarely touches the surface of the wood. Then press Define Zero\n\nIf you do not have the z-axis installed, adjust your router until the router bit just barely\ntouches the surface of the wood, then press Define Zero"
                    size_hint_x: leftCol
                GridLayout:
                    cols: 2
                    Image:
                        source: "./Documentation/Calibrate Machine Dimensions/Set Z Height.jpg"
            GridLayout:
                cols: 1
                size_hint_x: rightCol
                Label:
                GridLayout:
                    cols: 2
                    Label:
                        text: 'Enable\nAutomatic Z-Aixs:'
                    Switch:
                        on_active: root.enableZaxis()
                        id: zAxisActiveSwitch
                Button:
                    text: 'Raise Z-Axis 1mm'
                    on_release: root.moveZ(1)
                Button:
                    text: 'Raise Z-Axis .1mm'
                    on_release: root.moveZ(.1)
                Button:
                    text: 'Lower Z-Axis 1mm'
                    on_release: root.moveZ(-1)
                Button:
                    text: 'Lower Z-Axis .1mm'
                    on_release: root.moveZ(-.1)
                Button:
                    text: 'Define Zero'
                    on_release: root.zeroZ()
                Label:
        #choose kinematics type
        GridLayout:
            cols: 2
            GridLayout:
                cols: 1
                size_hint_x: leftCol
                Label:
                    text: "Now we're going to select the way the chains attach to the sled. There are currently two options. \n\nThe \"Quadrilateral\" system attaches the chains to the two stationary metal L brackets as shown in the left picture.\nThis is currently the default option. \n\nThe \"Triangular\" system attaches the chains to a system of either linkages or bearings which let the ends of the chains\nrotate around the router bit as shown in the picture on the right.\n\n Please choose an option from the drop down on the right, then press Next"
                    size_hint_x: leftCol
                GridLayout:
                    cols: 2
                    Image:
                        source: "./Documentation/Calibrate Machine Dimensions/Quadrilateral Kinematics.JPG"
                    Image:
                        source: "./Documentation/Calibrate Machine Dimensions/Triangular Kinematics.JPG"
            GridLayout:
                cols: 1
                size_hint_x: rightCol
                Label:
                Label:
                    text: "Please Choose\nAn Option"
                Spinner:
                    text: 'Quadrilateral' 
                    values: ('Quadrilateral', 'Triangular')
                    id: chooseKinematicsType
                Button:
                    text: 'Next'
                    on_release: root.setKinematicsType()
                Label:
        #cut test shape Triangular
        GridLayout:
            cols: 2
            GridLayout:
                cols: 1
                size_hint_x: leftCol
                Label:
                    text: "To refine these measurements we're going to cut a test shape.\n\nThe test shape consists of two short vertical cuts a known distance apart\n\nBased on the distance between these marks we can dial in the machine settings\n\nThe size of bit used is not critical\nMeasure from the left side of one mark to the left side of the other mark\n\nThe process will repeat until the spacing is accurate to within .5mm\nThe more accurate your measurements, the more accurate your machine will be\n\nPress Cut Test Pattern to begin"
                GridLayout:
                    cols: 2
                    Image:
                        source: "./Documentation/Calibrate Machine Dimensions/Test Shape Preview Triangular.JPG"
                    Image:
                        source: "./Documentation/Calibrate Machine Dimensions/Measure Test Shape Horizontal.jpg"
            GridLayout:
                cols: 1
                size_hint_x: rightCol
                Label:
                Label:
                    text: "Measurement:"
                TextInput:
                    id:triangleMeasure
                    disabled: True
                Button:
                    text: "MM"
                    on_release: root.switchUnits()
                    id: unitsBtnT
                    disabled: True
                Button:
                    text: "Enter Value"
                    on_release: root.enterTestPaternValuesTriangular()
                    id: enterValuesT
                    disabled: True
                Button:
                    text: "Cut Test\nPattern"
                    id: cutBtnT
                    on_release: root.cutTestPaternTriangular()
                Button:
                    text: "Stop\nCut"
                    on_release: root.stopCut()
                Label:
        #cut test shape Quadrilateral
        GridLayout:
            cols: 2
            GridLayout:
                cols: 1
                size_hint_x: leftCol
                Label:
                    text: "To refine these measurements we're going to cut a test shape.\n\nThe test shape consists of two short horizontal cuts and two short vertical cuts\n\nBased on the distance between these marks we can dial in the machine settings\n\nThe size of bit used is not critical\nMeasure to any point on the mark as long as you are consistent\n\nThe process will repeat until both measurements are equal to within .5mm\nThe more accurate your measurements, the more accurate your machine will be\n\nPress Cut Test Pattern to begin"
                GridLayout:
                    cols: 3
                    Image:
                        source: "./Documentation/Calibrate Machine Dimensions/Test Shape Preview.jpg"
                    Image:
                        source: "./Documentation/Calibrate Machine Dimensions/Measure Test Shape Horizontal.jpg"
                    Image:
                        source: "./Documentation/Calibrate Machine Dimensions/Measure Test Shape Vertical.jpg"
            GridLayout:
                cols: 1
                size_hint_x: rightCol
                Label:
                Label:
                    text: "Horizontal\nMeasurement:"
                TextInput:
                    id:horizMeasure
                    disabled: True
                Label:
                    text: "Vertical\nMeasurement:"
                TextInput:
                    id: vertMeasure
                    disabled: True
                Button:
                    text: "MM"
                    on_release: root.switchUnits()
                    id: unitsBtn
                    disabled: True
                Button:
                    text: "Enter Values"
                    on_release: root.enterTestPaternValues()
                    id: enterValues
                    disabled: True
                Button:
                    text: "Cut Test\nPattern"
                    id: cutBtn
                    on_release: root.cutTestPatern()
                Button:
                    text: "Stop\nCut"
                    on_release: root.stopCut()
                Label:
        #finished!
        GridLayout:
            cols: 2
            Label:
                text: "Your machine is now calibrated!\n\nCongratulations! "
                size_hint_x: leftCol
            Button:
                text: 'Finish'
                on_release: root.done()
                size_hint_x: rightCol
    
<CalibrateLengthsPopup>:
    carousel:carousel

    cols: 1
    size: root.size
    pos: root.pos

    Carousel:
        id: carousel
        direction: "right"
        #:set leftCol .8
        #:set rightCol .2
        GridLayout:
            cols: 2
            GridLayout:
                cols: 1
                Label:
                    text: "Orient each sprocket so that one tooth faces straight up in the 12:00 o'clock position.\n\nIt is important to start with the sprockets in a known configuration. \nUse the buttons to the right to rotate each sprocket so that one tooth points straight up.\nWhen you are ready, press Set Zero"
                    size_hint_x: leftCol
                Image:
                    source: "./Documentation/Calibrate Machine Dimensions/Sprocket at 12-00.jpg"
            GridLayout:
                cols: 1
                size_hint_x: rightCol
                Label:
                Button:
                    text: 'Turn Left Sprocket\n1 degree CCW'
                    on_release: root.LeftCCW()
                Button:
                    text: 'Turn Left Sprocket\n1 degree CW'
                    on_release: root.LeftCW()
                Button:
                    text: 'Turn Right Sprocket\n1 degree CCW'
                    on_release: root.RightCCW()
                Button:
                    text: 'Turn Right Sprocket\n1 degree CW'
                    on_release: root.RightCW()
                Button:
                    text: 'Set Zero'
                    on_release: root.setZero()
                Button:
                    text: 'Close'
                    on_release: root.done()
                Label:
        GridLayout:
            cols: 2
            GridLayout:
                cols: 1
                size_hint_x: leftCol
                Label:
                    text: "Now we are going to measure out the chains and reattach the sled\n\nHook the first link of each chain on the vertical tooth of each sprocket\n as shown in the picture below. Then press Calibrate Chain Lengths\n\nThe correct length of first the left and then the right chain will be measured out\n\nBe sure to keep an eye on the chains during this process to ensure that they do not become tangled\naround the sprocket. The motors are very powerful and the machine can damage itself this way\n\nOnce both chains are finished attach the sled, then press Finish"
                    size_hint_x: leftCol
                GridLayout:
                    cols: 3
                    Image:
                        source: "./Documentation/Calibrate Machine Dimensions/Chain On Left Sprocket.jpg"
                    Image:
                        source: "./Documentation/Calibrate Machine Dimensions/Ready To Calibrate Right Sprocket.jpg"
                    Image:
                        source: "./Documentation/Calibrate Machine Dimensions/Sled Attached.jpg"
            GridLayout:
                cols: 1
                size_hint_x: rightCol
                Label:
                Button:
                    text: 'Calibrate\nChain Lengths'
                    on_release: root.calibrateChainLengths()
                Button:
                    text: 'Stop Motor'
                    on_release: root.stop()
                Button:
                    text: 'Finish'
                    on_release: root.done()
                Label:

<SimulationCanvas>:
    motorSpacingError:motorSpacingError
    motorVerticalError:motorVerticalError
    sledMountSpacingError:sledMountSpacingError
    scatterInstance:scatterInstance
    vertBitDist:vertBitDist
    vertCGDist:vertCGDist
    leftChainOffset:leftChainOffset
    rightChainOffset:rightChainOffset
    motorSpacingErrorLabel:motorSpacingErrorLabel
    motorVerticalErrorLabel:motorVerticalErrorLabel
    sledMountSpacingErrorLabel:sledMountSpacingErrorLabel
    vertBitDistLabel:vertBitDistLabel
    vertCGDistLabel:vertCGDistLabel
    leftChainOffsetLabel:leftChainOffsetLabel
    rightChainOffsetLabel:rightChainOffsetLabel
    machineLabel1:machineLabel1
    machineLabel2:machineLabel2
    gridSize:gridSize
    gridSizeLabel:gridSizeLabel
    rotationRadiusOffset:rotationRadiusOffset
    rotationRadiusLabel:rotationRadiusLabel
    kinematicsSelect:kinematicsSelect

    rows: 3
    Label:
        text: "This simulation is designed to help us understand how the math behind Maslow is affected by errors in the computed machine dimensions\nTry adding error to any measurement, then press Recompute to see the affect\nThe path computed with the correct values is shown in green, the path with error added is shown in red"
        size_hint_y:.1
    GridLayout:
        cols: 2
        size_hint_y: .1
        Label:
            text: "Not yet computed"
            id: machineLabel1
            font_size: 10
        Label:
            text: "Not yet computed"
            id: machineLabel2
            font_size: 10
    GridLayout:
        cols: 2
        size_hint_y: .9
        ScatterPlane:
            do_rotation: False
            id: scatterInstance
            size_hint_x: .9

        GridLayout:
            cols: 1
            size_hint_x: .1
            Spinner:
                id: kinematicsSelect
                text: "Kinematics Type"
                values: "Quadrilateral", "Triangular"
                on_text: root.setKinematics(kinematicsSelect.text)
            Label:
                text: "Motor Spacing\nError: 0mm"
                text_size: self.width, self.height
                font_size: (self.height - 6)/2
                id: motorSpacingErrorLabel
            Slider:
                min: -50
                max:50
                value: 0
                id: motorSpacingError
            Label:
                text: "Motor Vertical\nError: 0mm"
                text_size: self.width, self.height
                font_size: (self.height - 6)/2
                id: motorVerticalErrorLabel
            Slider:
                min: -50
                max:50
                value: 0
                id: motorVerticalError
            Label:
                text: "Sled Mount\nSpacing Error: 0mm"
                text_size: self.width, self.height
                font_size: (self.height - 6)/2
                id: sledMountSpacingErrorLabel
                disabled: not root.isQuadKinematics
            Slider:
                min: -50
                max:50
                value: 0
                id: sledMountSpacingError
                disabled: not root.isQuadKinematics
            Label:
                text: "Vert Dist To\nBit Error: 0mm"
                text_size: self.width, self.height
                font_size: (self.height - 6)/2
                id: vertBitDistLabel
                disabled: not root.isQuadKinematics
            Slider:
                min: -50
                max:50
                value: 0
                id: vertBitDist
                disabled: not root.isQuadKinematics
            Label:
                text: "Vert Dist\nBit to CG Error: 0mm"
                text_size: self.width, self.height
                font_size: (self.height - 6)/2
                disabled: not root.isQuadKinematics
                id: vertCGDistLabel
            Slider:
                min: -50
                max:50
                value: 0
                id: vertCGDist
                disabled: not root.isQuadKinematics
            Label:
                text: "Left Chain\nSlipped Links: 0links"
                text_size: self.width, self.height
                font_size: (self.height - 6)/2
                id: leftChainOffsetLabel
            Slider:
                min: -10
                max:10
                value: 0
                id: leftChainOffset
            Label:
                text: "Right Chain\nSlipped Links: 0links"
                text_size: self.width, self.height
                font_size: (self.height - 6)/2
                id: rightChainOffsetLabel
            Slider:
                min: -10
                max:10
                value: 0
                id: rightChainOffset
            Label:
                text: "Rotation Radius"
                text_size: self.width, self.height
                font_size: (self.height - 6)/2
                disabled: root.isQuadKinematics
                id: rotationRadiusLabel
            Slider:
                min: -25
                max:25
                value: 0
                disabled: root.isQuadKinematics
                id: rotationRadiusOffset
            Label:
                text: "Grid Size: 150mm"
                text_size: self.width, self.height
                font_size: (self.height - 6)/2
                id: gridSizeLabel
            Slider:
                min: 25
                max:300
                value: 300
                id: gridSize

            Button:
                text: "Reset All"
                on_release: root.resetSliders()
            Button:
                text: "Recompute"
                on_release: root.recompute()

<TestPoint>

#:import pi math.pi
#:import cos math.cos
#:import sin math.sin
#:import V kivy.vector.Vector
<ModernMenu>:
    canvas.before:
        Color:
            rgba: 1, 1, 1, 1
        Ellipse:
            pos: self.center_x - self.radius, self.center_y - self.radius
            size: self.radius * 2, self.radius * 2
            angle_start: 0
            angle_end: self.circle_progress * 360 * self.creation_direction
        Color:
            rgba: self.color
        Line:
            circle:
                (
                self.center_x, self.center_y,
                self.radius, 0, self.circle_progress * 360 * self.creation_direction
                )
            width: self.line_width
    on_touch_down:
        V(args[1].pos).distance(self.center) < self.radius and (
        self.back() if self.choices_history else self.dismiss())

<ModernMenuLabel>:
    size: self.texture_size
    padding: 5, 5
    on_press: self.callback and self.callback(self)
    on_release: root.dismiss()
    canvas.before:
        Color:
            rgba: 1, 1, 1, 1
        Rectangle:
            pos: self.pos
            size: self.size
        Line:
            points:
                (
                self.center_x, self.center_y,
                self.parent.center_x + cos(
                self.opacity * self.index * 2 * pi / self.siblings
                ) * self.parent.radius,
                self.parent.center_y + sin(
                self.opacity * self.index * 2 * pi / self.siblings
                ) * self.parent.radius
                ) if self.parent else []
            width: self.parent.line_width if self.parent else 1
    center:
        (
        self.parent.center_x +
        cos(self.opacity * self.index * 2 * pi / self.siblings) * self.radius,
        self.parent.center_y +
        sin(self.opacity * self.index * 2 * pi / self.siblings) * self.radius
        ) if (self.size and self.parent and self.parent.children) else (0, 0)
